<?php declare(strict_types = 1);
namespace noxkiwi\cookbook\Context;

use noxkiwi\core\Context;
use noxkiwi\cookbook\Model\RecipeModel;
use noxkiwi\core\Helper\LinkHelper;
use noxkiwi\dataabstraction\Comparator;

/**
 * I am the Context to search and show recipes.
 *
 * use q to search for a recipe.
 * use r to identify a recipe.
 * use m to multiply a recipe.
 *
 * @package      noxkiwi\cookbook\Context
 * @author       Jan Nox <jan@nox.kiwi>
 * @license      https://nox.kiwi/license
 * @copyright    2022 noxkiwi
 * @version      1.0.0
 * @link         https://nox.kiwi/
 */
final class RecipeContext extends Context
{
    private const SEARCH     = 'q';
    private const RECIPE_ID  = 'recipe_id';
    private const MULTIPLIER = 'm';
    private const ORDER      = 'o';
    private RecipeModel $recipeModel;

    /**
     * @inheritDoc
     */
    public function isAllowed(): bool
    {
        parent::isAllowed(); // TODO: Change the autogenerated stub

        return true;
    }

    /**
     * @inheritDoc
     */
    protected function __construct()
    {
        parent::__construct();
        $this->recipeModel = RecipeModel::getInstance();
        switch ($this->request->get(self::ORDER)) {
            case 'LATEST':
                $this->recipeModel->addOrder('recipe_created', 'DESC');
                break;
            case 'FASTEST':
                $this->recipeModel->addOrder('recipe_time', 'ASC');
                break;
            case 'EASIEST':
                $this->recipeModel->addOrder('recipe_skill', 'ASC');
                break;
            case 'NAME':
            default:
                $this->recipeModel->addOrder('translation_key', 'ASC');
        }
    }

    /**
     * I will solely list all recipes on a simple page.
     *
     * @return void
     *
     * @throws \noxkiwi\dataabstraction\Exception\EntryMissingException
     * @throws \noxkiwi\singleton\Exception\SingletonException
     */
    protected function viewList(): void
    {
        $rows    = $this->recipeModel->search();
        $recipes = [];
        foreach ($rows as $row) {
            $recipes[] = $this->recipeModel->createRecipe($row['recipe_id'], 1);
        }
        $this->response->set('recipes', $recipes);
    }

    /**
     * I will solely search for a recipe and show the results.
     *
     * @return void
     *
     * @throws \noxkiwi\dataabstraction\Exception\EntryMissingException
     * @throws \noxkiwi\singleton\Exception\SingletonException
     */
    protected function viewSearch(): void
    {
        $searchTerm = (string)$this->request->get(self::SEARCH, '');
        if (empty($searchTerm)) {
            return;
        }
        // filter for the name
        $this->recipeModel->addFilter('translation_key', $searchTerm, Comparator::CONTAINS);
        // Search
        $rows    = $this->recipeModel->search();
        $recipes = [];
        foreach ($rows as $row) {
            $recipes[] = $this->recipeModel->createRecipe($row['recipe_id'], 1);
        }
        $this->response->set('recipes', $recipes);
        $this->response->set('query', $searchTerm);
        $this->response->set('count', count($rows));
    }

    /**
     * I will solely load one single recipe to the user's front-end.
     * If the recipe was not found or the recipeId is empty, I'll forward the user to the home page.
     *
     * @return void
     *
     * @throws \noxkiwi\dataabstraction\Exception\EntryMissingException
     * @throws \noxkiwi\singleton\Exception\SingletonException
     */
    protected function viewRecipe(): void
    {
        $recipeId = max(0, (int)$this->request->get(self::RECIPE_ID, -1));
        $multiplier = min(1000,max(0.5, (float)$this->request->get(self::MULTIPLIER, 1)));
        if (empty($recipeId)) {
            LinkHelper::forward('/');
        }
        $recipe     = $this->recipeModel->createRecipe($recipeId, $multiplier);
        $this->response->set('multiplier', $multiplier);
        $this->response->set('recipe', $recipe);
    }
}
